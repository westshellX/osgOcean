/*
* This source file is part of the osgOcean library
* 
* Copyright (C) 2009 Kim Bale
* Copyright (C) 2009 The University of Hull, UK
* 
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Lesser General Public License as published by the Free Software
* Foundation; either version 3 of the License, or (at your option) any later
* version.

* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
* http://www.gnu.org/copyleft/lesser.txt.
*/

#ifndef SKYDOME
#define SKYDOME

#include <osgSky/Export>
#include <osgSky/SphereSegment>
#include <osg/Program>
#include <osg/Uniform>
#include <osg/TextureCubeMap>

#include <osgOcean/ShaderManager>

namespace osgSky
{

class OSGSKY_EXPORT SkyDome : public SphereSegment
{
public:
	SkyDome( void );
	SkyDome( const SkyDome& copy, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY );
	SkyDome( float radius, unsigned int longSteps, unsigned int latSteps, osg::TextureCubeMap* cubemap );
	SkyDome( float radius,unsigned int longitudeSteps, unsigned int lattitudeSteps,float longStart,float longEnd,float latStart,float latEnd,osg::TextureCubeMap* cubmap);

protected:
	~SkyDome(void);
	
public:
	void setupStateSet( osg::TextureCubeMap* cubemap=0 );
	void create( float radius, unsigned int latSteps, unsigned int longSteps, osg::TextureCubeMap* cubemap );
	
	inline void setCubeMap( osg::TextureCubeMap* cubemap ){
		if(cubemap)
		getOrCreateStateSet()->setTextureAttributeAndModes( 0, cubemap, osg::StateAttribute::ON );
	}
	inline void setWaterCubeMap(osg::TextureCubeMap* cubemap)
	{
		if (cubemap)
			getOrCreateStateSet()->setTextureAttributeAndModes(1, cubemap, osg::StateAttribute::ON);
	}
	inline void setFogColor(osg::Vec4 color)
	{
		getOrCreateStateSet()->getOrCreateUniform("aboveWaterFogColor",osg::Uniform::FLOAT_VEC4)->set(color);
	}
	inline void setFogDensity(float density)
	{
		getOrCreateStateSet()->getOrCreateUniform("aboveWaterFogDensity",osg::Uniform::FLOAT)->set(density);
	}
	void setDefaultShader(bool on=true);

	void setReverseZ(bool on=true);
	bool getReverseZ();

private:
	osg::Program* createShader();  
	bool _isDefaultShader;
	bool _posZReverse;     //是否反转osg::TextureCubeMap::POSITIVE_Z和osg::TextureCubeMap::NEGATIVE_Z
};
}
#endif